abi:
rax: arg 6, return value
rbx: arg 2
rcx: not saved
rdx: arg 1
rbp: saved
rsp: saved
rsi[0-31]: syscall number
rsi[32-63]: syscall options
rdi: arg 5
r8: arg 3
r9: arg 4
r10: not saved
r11: not saved
r12: arg 7, saved if unused
r13: arg 8, saved if unused
r14: arg 9, saved if unused
r15: arg 10, saved if unused

0: info


1: fork


2: exec


3: bool thread_new (thread_func_t func)


return value:
true: success
false: failed to create new thread


4: void thread_block (usize reason, | usize nsec)


reasons:
0: does nothing
1: yield, sets thread to running state and switches to another thread, if available
if no threads other than the idle thread are ready to run, the current thread will continue to run
2: destroy, switches to another thread and terminates the current thread
3: sleep, will sleep until nsec nanoseconds after boot
any other number will do nothing


5: isize create_semaphore (usize n)
create a semaphore that lets up to n thread have it locked at the same time


6: bool delete_semaphore (usize id)
deletes the semaphore with id id


return value:
true: success
false: could not find or delete semaphore with id id


return value:
-1: failed to create semaphore
any other value: semaphore id


6: void semaphore_lock (usize id)
waits until the current thread can lock the semaphore with id id, then execution continues


7: bool semaphore_try_lock (usize id)
attempts to lock the semaphore, if the current thread can acquire the semaphore without waiting, returns true, otherwise returns false


return value:
true: acquired the semaphore
false: did not acquire the semaphore


8: void semaphore_unlock (usize id)
unlocks the semaphore, letting other threads lock it in the future


9: usize realloc (usize mem, usize orig, usize new)


10: salloc


11: sfree


12: reg


13: usize notify (char *eid | usize pid, usize a1, usize a2, usize a3, usize a4, usize a5, | usize a6, | usize a7, | usize a8, | usize a9)


options:
bit 0 (notify_pid):
0: send message to all processes with executable id specified in arg
1: send message to process with pid

bit 1 (notify_eargs):
0: send args a1 to a5 to process
1: send args a1 to a9 to process, a6 to a9 may not be saved


return value:
0: success
1: no process with eid or pid exists
